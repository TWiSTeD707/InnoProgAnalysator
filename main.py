# main.py
import requests
import datetime
import json
from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from innoProg_api import get_innoProg_user_solutions, get_innoProg_user_scores, format_datetime, get_innoProg_task_description
from analys import analyze_user_data

BOT_TOKEN = "" #Test Token

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)  # Create a regular keyboard
    keyboard.add(KeyboardButton("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"))  # Add buttons
    keyboard.add(KeyboardButton("‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –¢–ì –∫–∞–Ω–∞–ª"))
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ InnoProg.", reply_markup=keyboard)
@dp.message_handler(text="üìä –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
async def handle_analyse(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à ID –≤ —Å–∏—Å—Ç–µ–º–µ INNOPROG\n–ü—Ä–∏–º–µ—Ä: /statistics 123")
@dp.message_handler(text="‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –¢–ì –∫–∞–Ω–∞–ª")
async def handle_tg_channel(message: types.Message):
    await message.answer("–ü–µ—Ä–µ—Ö–æ–∂—É –≤ –∫–∞–Ω–∞–ª‚Ä¶", reply_markup=None)
    await message.answer(f"https://t.me/innoprog", reply_markup=None)

@dp.message_handler(commands=['statistics'])
async def handle_statistics(message: types.Message):
    args = message.get_args()
    if args:
        user_id = (args)
        solutions_data = get_innoProg_user_solutions(user_id)
        scores_data = get_innoProg_user_scores(user_id)
        if solutions_data and scores_data:
            analysis = analyze_user_data(solutions_data, scores_data)
            await message.answer(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:\n"
                                f"- –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {analysis['total_tasks']}\n"
                                f"- –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π: {round(analysis['average_time'])} –º–∏–Ω—É—Ç\n"  # Round to nearest whole number
                                f"- –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (—Ä–µ–∞–ª—å–Ω—ã–µ –±–∞–ª–ª—ã): {round(analysis['average_user_difficulty'])}\n"  # Round to nearest whole number
                                f"- –°—Ä–µ–¥–Ω–µ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –æ—Ü–µ–Ω–∫–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: {round(analysis['average_deviation'])}")  # Round to nearest whole number
        else:
            await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—à–µ–Ω–∏—è—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
