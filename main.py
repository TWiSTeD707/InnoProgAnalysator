# main.py
import requests
import datetime
import json
from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from innoProg_api import get_innoProg_user_solutions, get_innoProg_user_scores, format_datetime, get_innoProg_task_description
from analys import analyze_user_data

BOT_TOKEN = "7445941676:AAHBb6q_AxLQcCx80I6PmR9uvRuBxFsi9PI" #Test Token

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! üëã –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ InnoProg. \n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /statistics {user_id} –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

@dp.message_handler(commands=['statistics'])
async def handle_statistics(message: types.Message):
    try:
        args = message.get_args()
        if args:
            user_id = int(args)
            solutions_data = get_innoProg_user_solutions(user_id)
            scores_data = get_innoProg_user_scores(user_id)
            if solutions_data and scores_data:
                analysis = analyze_user_data(solutions_data, scores_data)
                await message.answer(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:\n"
                                    f"- –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {analysis['total_tasks']}\n"
                                    f"- –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π: {analysis['average_time']:.2f} —Å–µ–∫—É–Ω–¥\n"
                                    f"- –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (—Ä–µ–∞–ª—å–Ω—ã–µ –±–∞–ª–ª—ã): {analysis['average_user_difficulty']:.2f}\n"
                                    f"- –°—Ä–µ–¥–Ω–µ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –æ—Ü–µ–Ω–∫–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: {analysis['average_deviation']:.2f}\n"
                                    f"- –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ —Ä–µ—à–µ–Ω–∏—è: {analysis['average_time_between_attempts']:.2f} —Å–µ–∫—É–Ω–¥\n"
                                    f"- –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –∑–∞–¥–∞–Ω–∏–π:\n"
                                    f"  - –° –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤: {analysis['average_attempts_by_type']['–° –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤']:.2f}\n"
                                    f"  - –û—Ç–∫—Ä—ã—Ç—ã–π –≤–æ–ø—Ä–æ—Å: {analysis['average_attempts_by_type']['–û—Ç–∫—Ä—ã—Ç—ã–π –≤–æ–ø—Ä–æ—Å']:.2f}\n"
                                    f"  - –ù–∞–ø–∏—Å–∞–Ω–∏–µ –∫–æ–¥–∞: {analysis['average_attempts_by_type']['–ù–∞–ø–∏—Å–∞–Ω–∏–µ –∫–æ–¥–∞']:.2f}\n"
                                    f"  - –î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞: {analysis['average_attempts_by_type']['–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞']:.2f}\n"
                                    f"- –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è –∑–∞–¥–∞–Ω–∏–π —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤: {analysis['first_attempt_success_rate']:.2f}%\n"
                                    f"- –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫: {analysis['success_rate']:.2f}%")
            else:
                await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—à–µ–Ω–∏—è—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
        else:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
